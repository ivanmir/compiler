<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>compiler</groupId>
	<artifactId>compiler</artifactId>
	<version>0.0.5-SNAPSHOT</version>
	<packaging>war</packaging>
	<properties>
		<!-- Properties that hold host and port of proxy should you have one - 
			otherwise remove all occurrences of the properties -->
		<!-- <proxy.host>proxy-trial.od.sap.biz</proxy.host> <proxy.port>8080</proxy.port> -->

		<!-- Properties that hold information on the location and version of the 
			SAP HANA Cloud Platform SDK -->
		<sap.cloud.sdk.path>${project.build.directory}/sdk</sap.cloud.sdk.path>
		<sap.cloud.sdk.version>3.29.11.3</sap.cloud.sdk.version>

		<!-- Property that holds supported JDK version for the given SAP HANA Cloud 
			SDK -->
		<sap.cloud.jdk.version>1.8</sap.cloud.jdk.version>

		<!-- Properties that hold information on your SAP HANA Cloud account -->
		<sap.cloud.host>${env.SAP_CLOUD_HOST}</sap.cloud.host>
		<sap.cloud.account>${env.SAP_CLOUD_ACCOUNT}</sap.cloud.account>
		<sap.cloud.username>${env.SAP_CLOUD_USERNAME}</sap.cloud.username>
		<sap.cloud.password>${env.SAP_CLOUD_PASSWORD}</sap.cloud.password>
		<sap.cloud.application>${env.APPLICATION}</sap.cloud.application>

		<!-- Properties that hold the local server information required for local 
			integration-testing -->
		<local.server.root>${project.build.directory}/server</local.server.root>
		<local.server.host>localhost</local.server.host>
		<local.server.console.port>9003</local.server.console.port>
		<local.server.jmx.port>9004</local.server.jmx.port>
		<local.server.http.port>9080</local.server.http.port>
		<local.server.https.port>9443</local.server.https.port>
		<local.server.ajp.port>9009</local.server.ajp.port>

		<!-- Property setting source encoding to UTF-8 -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
	</properties>
	<dependencies>

		<!-- The SAP Cloud Platform Java Web Tomcat 8 API -->
		<dependency>
			<groupId>com.sap.cloud</groupId>
			<artifactId>neo-java-web-api</artifactId>
			<version>${sap.cloud.sdk.version}</version>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>2.7</version>
		</dependency>

		<dependency>
  			<groupId>com.google.guava</groupId>
  			<artifactId>guava</artifactId>
  			<version>[29.0-jre,)</version>
		</dependency>

	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>3.1.0</version>
				<configuration>
					<webXml>WebContent\WEB-INF\web.xml</webXml>
				</configuration>
			</plugin>

			<!-- Set compiler to officially supported JDK version for the given SAP 
				HANA Cloud SDK -->
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>2.5.1</version>
				<configuration>
					<source>${sap.cloud.jdk.version}</source>
					<target>${sap.cloud.jdk.version}</target>
					<showDeprecation>true</showDeprecation>
					<showWarnings>true</showWarnings>
				</configuration>
			</plugin>

			<!-- Enforce officially supported JDK and validated Maven version for 
				the given SAP HANA Cloud SDK or higher -->
			<plugin>
				<artifactId>maven-enforcer-plugin</artifactId>
				<version>1.0.1</version>
				<executions>
					<execution>
						<id>enforce-maven</id>
						<goals>
							<goal>enforce</goal>
						</goals>
						<configuration>
							<rules>
								<requireJavaVersion>
									<version>[${sap.cloud.jdk.version},2.0)</version>
								</requireJavaVersion>
								<requireMavenVersion>
									<version>[3.0.3, 4.0.0)</version>
								</requireMavenVersion>
							</rules>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>

		<pluginManagement>
			<plugins>
				<!-- Force m2e to ignore plugin goal that it doesn't support naturally -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.apache.maven.plugins
										</groupId>
										<artifactId>
											maven-enforcer-plugin
										</artifactId>
										<versionRange>
											[0.0.1,)
										</versionRange>
										<goals>
											<goal>enforce</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>

	</build>
	<profiles>
		<!-- Activate compiler warnings when matching JDK is present (compiler 
			then doesn't generate bootstrap warnings) -->
		<profile>
			<id>compiler-warnings</id>
			<activation>
				<activeByDefault>false</activeByDefault>
				<jdk>1.6</jdk>
			</activation>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-compiler-plugin</artifactId>
						<version>2.5.1</version>
						<configuration>
							<compilerArguments>
								<Werror />
							</compilerArguments>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!-- Install local server from the P2 repository that is contained inside 
			the SAP HANA Cloud SDK, deploy the built web application into it, start local 
			server, wait for it and the built and deployed web application to become 
			available, integration-test the web application on the local server, and 
			stop the local server finally - note that you need to supply the environment 
			variables PROXY_HOST and PROXY_PORT if you have a proxy -->
		<profile>
			<id>local-integration-tests</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-enforcer-plugin</artifactId>
						<version>1.0.1</version>
						<executions>
							<execution>
								<id>enforce-maven</id>
								<goals>
									<goal>enforce</goal>
								</goals>
								<configuration>
									<rules>
										<requireProperty>
											<property>proxy.host</property>
											<message>Environment variable PROXY_HOST is missing, but required!</message>
										</requireProperty>
										<requireProperty>
											<property>proxy.port</property>
											<message>Environment variable PROXY_PORT is missing, but required!</message>
										</requireProperty>
									</rules>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>com.sap.cloud</groupId>
						<artifactId>neo-java-web-maven-plugin</artifactId>
						<version>${sap.cloud.sdk.version}</version>
						<executions>
							<execution>
								<id>setup-local-server</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>install-sdk</goal>
									<goal>install-local</goal>
									<goal>deploy-local</goal>
								</goals>
							</execution>
							<execution>
								<id>start-local-server</id>
								<phase>integration-test</phase>
								<goals>
									<goal>start-local</goal>
								</goals>
							</execution>
							<execution>
								<id>cleanup-local-server</id>
								<phase>post-integration-test</phase>
								<goals>
									<goal>stop-local</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<sdkInstallPath>${sap.cloud.sdk.path}</sdkInstallPath>
							<location>${local.server.root}</location>
							<consolePort>${local.server.console.port}</consolePort>
							<httpPort>${local.server.http.port}</httpPort>
							<httpsPort>${local.server.https.port}</httpsPort>
							<jmxPort>${local.server.jmx.port}</jmxPort>
							<ajpPort>${local.server.ajp.port}</ajpPort>
							<httpProxyHost>${proxy.host}</httpProxyHost>
							<httpProxyPort>${proxy.port}</httpProxyPort>
							<httpsProxyHost>${proxy.host}</httpsProxyHost>
							<httpsProxyPort>${proxy.port}</httpsProxyPort>
							<waitUrl>http://${local.server.host}:${local.server.http.port}/${project.artifactId}/</waitUrl>
							<source>${project.build.directory}/${project.artifactId}.war</source>
						</configuration>
					</plugin>
					<plugin>
						<artifactId>maven-failsafe-plugin</artifactId>
						<executions>
							<execution>
								<id>execute-local-integration-tests</id>
								<phase>integration-test</phase>
								<goals>
									<goal>integration-test</goal>
								</goals>
								<configuration>
									<argLine>-Dhttp.proxyHost=${proxy.host}
										-Dhttp.proxyPort=${proxy.port} -Dhttps.proxyHost=${proxy.host}
										-Dhttps.proxyPort=${proxy.port}</argLine>
									<systemPropertyVariables>
										<integration.test.server.url>http://${local.server.host}:${local.server.http.port}</integration.test.server.url>
									</systemPropertyVariables>
								</configuration>
							</execution>
							<execution>
								<id>verify-local-integration-tests</id>
								<goals>
									<goal>verify</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!-- Stop cloud server, deploy the built web application into it, start 
			cloud server, wait for it and the built and deployed web application to become 
			available, integration-test the web application on the cloud server, and 
			stop the cloud server finally - note that you need to supply the environment 
			variables SAP_CLOUD_ACCOUNT, SAP_CLOUD_USERNAME, and SAP_CLOUD_PASSWORD for 
			the operations to pass successfully and PROXY_HOST and PROXY_PORT if you 
			have a proxy -->
		<profile>
			<id>cloud-integration-tests</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-enforcer-plugin</artifactId>
						<version>1.0.1</version>
						<executions>
							<execution>
								<id>enforce-maven</id>
								<goals>
									<goal>enforce</goal>
								</goals>
								<configuration>
									<rules>
										<requireProperty>
											<property>proxy.host</property>
											<message>Environment variable PROXY_HOST is missing, but
												required!</message>
										</requireProperty>
										<requireProperty>
											<property>proxy.port</property>
											<message>Environment variable PROXY_PORT is missing, but
												required!</message>
										</requireProperty>
										<requireProperty>
											<property>sap.cloud.account</property>
											<message>Environment variable SAP_CLOUD_ACCOUNT is missing,
												but required!</message>
										</requireProperty>
										<requireProperty>
											<property>sap.cloud.username</property>
											<message>Environment variable SAP_CLOUD_USERNAME is missing,
												but required!</message>
										</requireProperty>
										<requireProperty>
											<property>sap.cloud.password</property>
											<message>Environment variable SAP_CLOUD_PASSWORD is missing,
												but required!</message>
										</requireProperty>
									</rules>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>com.sap.cloud</groupId>
						<artifactId>neo-java-web-maven-plugin</artifactId>
						<version>${sap.cloud.sdk.version}</version>
						<executions>
							<execution>
								<id>prepare-cloud-server</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>install-sdk</goal>
									<goal>stop</goal>
									<goal>deploy</goal>
									<goal>start</goal>
								</goals>
							</execution>
							<execution>
								<id>cleanup-cloud-server</id>
								<phase>post-integration-test</phase>
								<goals>
									<goal>stop</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<sdkInstallPath>${sap.cloud.sdk.path}</sdkInstallPath>
							<host>${sap.cloud.host}</host>
							<account>${sap.cloud.account}</account>
							<application>${sap.cloud.application}</application>
							<user>${sap.cloud.username}</user>
							<password>${sap.cloud.password}</password>
							<source>${project.build.directory}/${project.artifactId}.war</source>
							<synchronous>true</synchronous>
							<!-- <consoleHttpProxyHost>${proxy.host}</consoleHttpProxyHost> <consoleHttpProxyPort>${proxy.port}</consoleHttpProxyPort> 
								<consoleHttpsProxyHost>${proxy.host}</consoleHttpsProxyHost> <consoleHttpsProxyPort>${proxy.port}</consoleHttpsProxyPort> -->
						</configuration>
					</plugin>
					<plugin>
						<artifactId>maven-failsafe-plugin</artifactId>
						<executions>
							<execution>
								<id>execute-cloud-integration-tests</id>
								<phase>integration-test</phase>
								<goals>
									<goal>integration-test</goal>
								</goals>
								<configuration>
									<!-- <argLine>-Dhttp.proxyHost=${proxy.host} -Dhttp.proxyPort=${proxy.port} 
										-Dhttps.proxyHost=${proxy.host} -Dhttps.proxyPort=${proxy.port}</argLine> -->
									<systemPropertyVariables>
										<sap.cloud.username>${sap.cloud.username}</sap.cloud.username>
										<sap.cloud.password>${sap.cloud.password}</sap.cloud.password>
										<integration.test.server.url>https://${sap.cloud.application}${sap.cloud.account}.${sap.cloud.host}</integration.test.server.url>
									</systemPropertyVariables>
								</configuration>
							</execution>
							<execution>
								<id>verify-cloud-integration-tests</id>
								<goals>
									<goal>verify</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
